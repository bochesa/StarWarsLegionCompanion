// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UtilityLibrary.Data.SWContext;

#nullable disable

namespace UtilityLibrary.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230122143615_restriction")]
    partial class restriction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KeywordUpgrade", b =>
                {
                    b.Property<int>("KeywordsId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradesId")
                        .HasColumnType("int");

                    b.HasKey("KeywordsId", "UpgradesId");

                    b.HasIndex("UpgradesId");

                    b.ToTable("KeywordUpgrade");
                });

            modelBuilder.Entity("KeywordWeapon", b =>
                {
                    b.Property<int>("KeywordsId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponsId")
                        .HasColumnType("int");

                    b.HasKey("KeywordsId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("KeywordWeapon");
                });

            modelBuilder.Entity("UnitWeapon", b =>
                {
                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponsId")
                        .HasColumnType("int");

                    b.HasKey("UnitsId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("UnitWeapon");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Army", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmySetupId")
                        .HasColumnType("int");

                    b.Property<int>("Faction")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "faction");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmySetupId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Armies");
                });

            modelBuilder.Entity("UtilityLibrary.Models.ArmySetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommanderMaximum")
                        .HasColumnType("int");

                    b.Property<int>("CommanderMinimum")
                        .HasColumnType("int");

                    b.Property<int>("CorpsMaximum")
                        .HasColumnType("int");

                    b.Property<int>("CorpsMinimum")
                        .HasColumnType("int");

                    b.Property<int>("HeavyMaximum")
                        .HasColumnType("int");

                    b.Property<int>("HeavyMinimum")
                        .HasColumnType("int");

                    b.Property<int>("OperativeMaximum")
                        .HasColumnType("int");

                    b.Property<int>("OperativeMinimum")
                        .HasColumnType("int");

                    b.Property<int>("PointLimit")
                        .HasColumnType("int");

                    b.Property<int>("SpecialForcesMaximum")
                        .HasColumnType("int");

                    b.Property<int>("SpecialForcesMinimum")
                        .HasColumnType("int");

                    b.Property<int>("SupportMaximum")
                        .HasColumnType("int");

                    b.Property<int>("SupportMinimum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ArmySetup");
                });

            modelBuilder.Entity("UtilityLibrary.Models.AttackValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlackDie")
                        .HasColumnType("int");

                    b.Property<int>("RedDie")
                        .HasColumnType("int");

                    b.Property<int>("WhiteDie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AttackValue");
                });

            modelBuilder.Entity("UtilityLibrary.Models.ChosenCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmyId")
                        .HasColumnType("int");

                    b.Property<int>("CommandId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmyId");

                    b.HasIndex("CommandId");

                    b.ToTable("ChosenCommands");
                });

            modelBuilder.Entity("UtilityLibrary.Models.ChosenUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmyId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmyId");

                    b.HasIndex("UnitId");

                    b.ToTable("ChosenUnit");
                });

            modelBuilder.Entity("UtilityLibrary.Models.ChosenUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmyId")
                        .HasColumnType("int");

                    b.Property<int>("ChosenUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ChosenUpgradeOption")
                        .HasColumnType("int");

                    b.Property<int?>("UpgradeId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmyId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("ChosenUpgrade");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Orders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pips")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "abilityValue");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "actionType");

                    b.Property<int>("KeywordType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "keywordType");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "longDescription");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "shortDescription");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RestrictionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UpgradeId");

                    b.ToTable("Restrictions");

                    b.HasAnnotation("Relational:JsonPropertyName", "restrictions");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackSurge")
                        .HasColumnType("int");

                    b.Property<int>("Courage")
                        .HasColumnType("int");

                    b.Property<int>("Faction")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "faction");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "image");

                    b.Property<bool>("IsDefenseRed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefenseSurge")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isUnique");

                    b.Property<int>("MinisInUnit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("PointCost")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "pointCost");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "rank");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "surName");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.Property<int>("WoundThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "image");

                    b.Property<bool>("IsAction")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isAction");

                    b.Property<bool>("IsExhaustable")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isExhaustable");

                    b.Property<bool>("IsFreeAction")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isFreeAction");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isUnique");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("PointCost")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "pointCost");

                    b.Property<int?>("ReconfigureId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "text");

                    b.Property<int>("UpgradeType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "upgradeType");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.Property<int>("WoundThreshold")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "woundThreshold");

                    b.HasKey("Id");

                    b.HasIndex("ReconfigureId");

                    b.HasIndex("WeaponId");

                    b.ToTable("Upgrades");
                });

            modelBuilder.Entity("UtilityLibrary.Models.UpgradeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "unitId");

                    b.Property<int>("UpgradeType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "upgradeType");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("UpgradeOption");

                    b.HasAnnotation("Relational:JsonPropertyName", "upgradeOptions");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackSurge")
                        .HasColumnType("int");

                    b.Property<int?>("AttackValueId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxRange")
                        .HasColumnType("int");

                    b.Property<int?>("MinRange")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RangeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackValueId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("KeywordUpgrade", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Keyword", null)
                        .WithMany()
                        .HasForeignKey("KeywordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtilityLibrary.Models.Upgrade", null)
                        .WithMany()
                        .HasForeignKey("UpgradesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeywordWeapon", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Keyword", null)
                        .WithMany()
                        .HasForeignKey("KeywordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtilityLibrary.Models.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnitWeapon", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtilityLibrary.Models.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UtilityLibrary.Models.Army", b =>
                {
                    b.HasOne("UtilityLibrary.Models.ArmySetup", "ArmySetup")
                        .WithMany()
                        .HasForeignKey("ArmySetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtilityLibrary.Models.Player", "Player")
                        .WithMany("Armies")
                        .HasForeignKey("PlayerId");

                    b.Navigation("ArmySetup");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("UtilityLibrary.Models.ChosenCommand", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Army", null)
                        .WithMany("ChosenCommands")
                        .HasForeignKey("ArmyId");

                    b.HasOne("UtilityLibrary.Models.Command", "Command")
                        .WithMany()
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Command");
                });

            modelBuilder.Entity("UtilityLibrary.Models.ChosenUnit", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Army", null)
                        .WithMany("ChosenUnits")
                        .HasForeignKey("ArmyId");

                    b.HasOne("UtilityLibrary.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UtilityLibrary.Models.ChosenUpgrade", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Army", null)
                        .WithMany("ChosenUpgrades")
                        .HasForeignKey("ArmyId");

                    b.HasOne("UtilityLibrary.Models.Upgrade", "Upgrade")
                        .WithMany()
                        .HasForeignKey("UpgradeId");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Command", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Keyword", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Unit", null)
                        .WithMany("Keywords")
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Restriction", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Upgrade", null)
                        .WithMany("Restrictions")
                        .HasForeignKey("UpgradeId");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Upgrade", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Upgrade", "Reconfigure")
                        .WithMany()
                        .HasForeignKey("ReconfigureId");

                    b.HasOne("UtilityLibrary.Models.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId");

                    b.Navigation("Reconfigure");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("UtilityLibrary.Models.UpgradeOption", b =>
                {
                    b.HasOne("UtilityLibrary.Models.Unit", null)
                        .WithMany("UpgradeOptions")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UtilityLibrary.Models.Weapon", b =>
                {
                    b.HasOne("UtilityLibrary.Models.AttackValue", "AttackValue")
                        .WithMany()
                        .HasForeignKey("AttackValueId");

                    b.Navigation("AttackValue");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Army", b =>
                {
                    b.Navigation("ChosenCommands");

                    b.Navigation("ChosenUnits");

                    b.Navigation("ChosenUpgrades");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Player", b =>
                {
                    b.Navigation("Armies");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Unit", b =>
                {
                    b.Navigation("Keywords");

                    b.Navigation("UpgradeOptions");
                });

            modelBuilder.Entity("UtilityLibrary.Models.Upgrade", b =>
                {
                    b.Navigation("Restrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
